(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{755:function(e,t,s){e.exports=s.p+"assets/img/redis1.dee59a76.png"},756:function(e,t,s){e.exports=s.p+"assets/img/redis2.8b33cb72.png"},757:function(e,t,s){e.exports=s.p+"assets/img/redis5.491f09e7.png"},758:function(e,t,s){e.exports=s.p+"assets/img/redis3.068c0de6.png"},759:function(e,t,s){e.exports=s.p+"assets/img/redis4.e519c9e7.png"},801:function(e,t,s){"use strict";s.r(t);var a=s(4),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[e._v("介绍")]),a("p",[e._v("介绍Redis的基本概念以及对常用的API讲解，通过学习可以掌握对Redis基本的API的理解和使用")])]),e._v(" "),a("h2",{attrs:{id:"redis介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis介绍"}},[e._v("#")]),e._v(" Redis介绍")]),e._v(" "),a("h3",{attrs:{id:"简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[e._v("#")]),e._v(" 简介")]),e._v(" "),a("ul",[a("li",[e._v("Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库。")])]),e._v(" "),a("h3",{attrs:{id:"特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特征"}},[e._v("#")]),e._v(" 特征")]),e._v(" "),a("ul",[a("li",[e._v("数据间没有必然的关联关系")]),e._v(" "),a("li",[a("strong",[e._v("内部采用单线程机制进行工作")])]),e._v(" "),a("li",[a("strong",[e._v("高性能")])]),e._v(" "),a("li",[e._v("多数据类型支持\n"),a("ul",[a("li",[e._v("字符串类型 string")]),e._v(" "),a("li",[e._v("列表类型 list")]),e._v(" "),a("li",[e._v("散列类型 hash")]),e._v(" "),a("li",[e._v("集合类型 set")]),e._v(" "),a("li",[e._v("有序集合类型 sorted set")])])]),e._v(" "),a("li",[e._v("持久化支持")])]),e._v(" "),a("h3",{attrs:{id:"数据结构和内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构和内部编码"}},[e._v("#")]),e._v(" 数据结构和内部编码")]),e._v(" "),a("h4",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[e._v("#")]),e._v(" 数据结构")]),e._v(" "),a("p",[a("code",[e._v("type")]),e._v("命令返回当前键的数据结构类型，分别是：")]),e._v(" "),a("ul",[a("li",[e._v("字符串")]),e._v(" "),a("li",[e._v("哈希")]),e._v(" "),a("li",[e._v("列表")]),e._v(" "),a("li",[e._v("集合")]),e._v(" "),a("li",[e._v("有序集合")])]),e._v(" "),a("p",[a("img",{attrs:{src:s(755),alt:""}})]),e._v(" "),a("p",[e._v("​\t\t\t\t\t\t\t\t\t\t 图1.1 redis数据结构")]),e._v(" "),a("h4",{attrs:{id:"内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部编码"}},[e._v("#")]),e._v(" 内部编码")]),e._v(" "),a("p",[e._v("以上的数据结构只是redis对外的数据结构，实际上每种数据结构都有自己底层的内部编码实现，redis提供"),a("code",[e._v("object encoding")]),e._v("命令查询内部编码")]),e._v(" "),a("p",[a("img",{attrs:{src:s(756),alt:""}})]),e._v(" "),a("p",[e._v("​\t\t\t\t\t\t\t\t\t图1.2 redis数据结构和内部编码")]),e._v(" "),a("h3",{attrs:{id:"redis下载和安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis下载和安装"}},[e._v("#")]),e._v(" Redis下载和安装")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("windows版本")]),e._v(" "),a("p",[e._v("下载地址：< https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100 >")])]),e._v(" "),a("li",[a("p",[e._v("核心文件")]),e._v(" "),a("p",[e._v("redis-server.exe  服务端可执行文件")]),e._v(" "),a("p",[e._v("redis-cli  客户端可执行文件")]),e._v(" "),a("p",[e._v("redis.conf  redis核心配置文件")]),e._v(" "),a("p",[e._v("redis-check-aof.exe  AOF文件修复工具")]),e._v(" "),a("p",[e._v("redis-check-dump.exe  RDB文件检查工具")])])]),e._v(" "),a("h3",{attrs:{id:"redis基础命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis基础命令"}},[e._v("#")]),e._v(" Redis基础命令")]),e._v(" "),a("h4",{attrs:{id:"_1、常用基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、常用基本命令"}},[e._v("#")]),e._v(" 1、常用基本命令")]),e._v(" "),a("ul",[a("li",[e._v("keys pattern  遍历键")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(" * 代表匹配任意字符\n ? 代表匹配一个字符\n [] 代表匹配部分字符\n \\x 用来做转义\n")])])]),a("ul",[a("li",[e._v("help cmd  获取一个具体指令的帮助信息")]),e._v(" "),a("li",[e._v("dbsize   返回当前数据库中键的总数")]),e._v(" "),a("li",[e._v("exists key   检查键是否存在，存在返回1，不存在返回0")]),e._v(" "),a("li",[e._v("del key [key1 ...]  删除键，返回成功删除键的个数")]),e._v(" "),a("li",[e._v("rename key newkey  键重命名")]),e._v(" "),a("li",[e._v("randomkey  随机返回一个键")]),e._v(" "),a("li",[e._v("expire key seconds  键过期，给键添加过期时间，超过过期时间后，会自动删除键")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("可以通过 ttl 命令观察键的的剩余过期时间，它有3种返回值\n- 大于等于0：键剩余的过期时间\n- -1：键没有设置过期时间\n- -2：键不存在\n")])])]),a("ul",[a("li",[a("p",[e._v("type key  查询键的数据结构类型")])]),e._v(" "),a("li",[a("p",[e._v("object encoding key  查看内部编码")])]),e._v(" "),a("li",[a("p",[e._v("select dbIndex  切换数据库（连接redis时，默认使用的是0号数据库）")])])]),e._v(" "),a("h4",{attrs:{id:"_2、字符串-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、字符串-string"}},[e._v("#")]),e._v(" 2、字符串（String）")]),e._v(" "),a("h5",{attrs:{id:"_2-1-基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本命令"}},[e._v("#")]),e._v(" 2.1 基本命令")]),e._v(" "),a("ul",[a("li",[e._v("SET key value` 设置指定key的值")]),e._v(" "),a("li",[a("code",[e._v("GET key")]),e._v(" 获取指定key的值")]),e._v(" "),a("li",[a("code",[e._v("GETRANGE key start end")]),e._v("  返回 key 中字符串值的子字符 （从0开始）")]),e._v(" "),a("li",[a("code",[e._v("STRLEN key")]),e._v("  返回 key 所储存的字符串值的长度")]),e._v(" "),a("li",[a("code",[e._v("SETEX key seconds value")]),e._v("   将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)")]),e._v(" "),a("li",[a("code",[e._v("SETNX key value")]),e._v("  只有在 key 不存在时设置 key 的值")]),e._v(" "),a("li",[a("code",[e._v("SETXX key value")]),e._v("  只有在key存在时才能设置成功，用于更新")]),e._v(" "),a("li",[a("code",[e._v("SETRANGE key offset value")]),e._v(" 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始")]),e._v(" "),a("li",[a("code",[e._v("MSET key value[key value]")]),e._v("  同时设置一个或多个 key-value 对")]),e._v(" "),a("li",[a("code",[e._v("MSETNX key value[key value]")]),e._v("  同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在")]),e._v(" "),a("li",[a("code",[e._v("INCR key")]),e._v("  将 key 中储存的数字值增一 ,返回增加后的数值")]),e._v(" "),a("li",[a("code",[e._v("INCRBY key increment")]),e._v("   将 key 所储存的值加上给定的增量值（increment）")]),e._v(" "),a("li",[a("code",[e._v("DECR key")]),e._v(" 将 key 中储存的数字值减一")]),e._v(" "),a("li",[a("code",[e._v("DECRBY key decrement")]),e._v(" key 所储存的值减去给定的减量值（decrement）")]),e._v(" "),a("li",[a("code",[e._v("APPEND key value")]),e._v(" 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾")])]),e._v(" "),a("h5",{attrs:{id:"_2-2-内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-内部编码"}},[e._v("#")]),e._v(" 2.2 内部编码")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("int")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("8个字节的长整型\n")])])])]),e._v(" "),a("li",[a("p",[e._v("embstr")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("小于等于39个字节的字符串\n")])])])]),e._v(" "),a("li",[a("p",[e._v("raw")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("大于39个字节的字符串\n")])])])])]),e._v(" "),a("h5",{attrs:{id:"_2-3-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-应用场景"}},[e._v("#")]),e._v(" 2.3 应用场景")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("缓存功能")]),e._v(" "),a("p",[e._v("redis作为缓存层，关系型数据库（mysql）作为存储层，大部分请求的数据都是从redis中获取，若redis中不存在，再从mysql中读取并写入到redis中。由于redis具有支撑高并发的特性，所以缓存通常能起到加速读写和降低后端压力的作用。")]),e._v(" "),a("p",[a("img",{attrs:{src:s(757),alt:""}})]),e._v(" "),a("p",[e._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t图2.1  缓存存储架构")]),e._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[e._v("共享session（企业级共享session方案-Spring session）")]),e._v(" "),a("li",[e._v("限速")])])])]),e._v(" "),a("h4",{attrs:{id:"_3、列表-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、列表-list"}},[e._v("#")]),e._v(" 3、列表（List）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\t列表类型是用来存储多个有序的字符串。列表类型有两个特点：\n\t1、列表中的元素是有序的，这就意味着可以通过索引下标的方式获取某个元素或者某个范围内的元素列表\n\t2、列表中的元素是可以重复的\n")])])]),a("h5",{attrs:{id:"_3-1-添加"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-添加"}},[e._v("#")]),e._v(" 3.1 添加")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("LPUSH key value1[value2]")]),e._v("  将一个或多个值插入到列表头部 (头部插入)")]),e._v(" "),a("li",[a("code",[e._v("LPUSHX key value")]),e._v("  将一个值插入到已存在的列表头部，列表不存在时操作无效")]),e._v(" "),a("li",[a("code",[e._v("RPUSH key value1[value2]")]),e._v("  在列表中添加一个或多个值 （尾部插入）")]),e._v(" "),a("li",[a("code",[e._v("RPUSHX key value")]),e._v(" 用于将一个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效")]),e._v(" "),a("li",[a("code",[e._v("LINSERT key BEFORE|AFTER element value")]),e._v(" 将值 value 插入到列表 key 当中，位于值 element之前或之后（如果列表中存在重复的元素，则以从头部找到的第一个元素为准）")])]),e._v(" "),a("h5",{attrs:{id:"_3-2-查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-查询"}},[e._v("#")]),e._v(" 3.2 查询")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("LRANGE key strat stop")]),e._v("  获取列表指定范围内的元素 (LRANGE key 0 -1 获取所有)")]),e._v(" "),a("li",[a("code",[e._v("LLEN key")]),e._v(" 获取列表长度")]),e._v(" "),a("li",[a("code",[e._v("LINDEX key index")]),e._v(" 通过索引获取列表中的元素 (索引从0开始)")])]),e._v(" "),a("h5",{attrs:{id:"_3-3-删除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-删除"}},[e._v("#")]),e._v(" 3.3 删除")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("LPOP key")]),e._v("  移出并获取列表的第一个元素 返回值为移除的元素")]),e._v(" "),a("li",[a("code",[e._v("RPOP key")]),e._v(" 移除列表的最后一个元素，返回值为移除的元素")]),e._v(" "),a("li",[a("code",[e._v("LREM key count value")]),e._v(" 根据参数 count 的值，移除列表中与参数 value相等的元素")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- count > 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 COUNT 。\n- count < 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 COUNT 的绝对值。\n- count = 0 : 移除表中所有与 VALUE 相等的值。\n")])])]),a("ul",[a("li",[a("p",[a("code",[e._v("LTRIM key start stop")]),e._v(" 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("RPOPLPUSH source destination")]),e._v(" 移除列表的最后一个元素，并将该元素添加到另一个列表并返回")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("BRPOPLPUSH source destination timeout")]),e._v(" 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止")])])]),e._v(" "),a("h5",{attrs:{id:"_3-4-修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-修改"}},[e._v("#")]),e._v(" 3.4 修改")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("LSET key index value")]),e._v(" 通过索引设置列表元素的值")])]),e._v(" "),a("h5",{attrs:{id:"_3-5-阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-阻塞"}},[e._v("#")]),e._v(" 3.5 阻塞")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("BLPOP key1[key2] timeout")]),e._v(" 移出并获取一个或多个列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止")]),e._v(" "),a("li",[a("code",[e._v("BRPOP key1[key2] timeout")]),e._v("   移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止")])]),e._v(" "),a("h5",{attrs:{id:"_3-6-内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-内部编码"}},[e._v("#")]),e._v(" 3.6 内部编码")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("ziplist(压缩列表)")]),e._v(" "),a("p",[e._v("当列标的元素个数小于list-max-ziplist-entries配置（默认512个），同时列表中的每个元素的值都小于list-max-ziplist-value配置（默认64个字节），redis选用ziplist来作为列表的内部实现。")])]),e._v(" "),a("li",[a("p",[e._v("linkedlist(链表)")]),e._v(" "),a("p",[e._v("当列表类型无法满足ziplist的条件时，选用linkedlist作为列表的内部实现")])])]),e._v(" "),a("h5",{attrs:{id:"_3-7-应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-应用场景"}},[e._v("#")]),e._v(" 3.7 应用场景")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("消息队列")]),e._v(" "),a("p",[e._v("Redis的 lpush+brpop命令组合可以实现阻塞队列，生产者客户端使用lpush从列表左侧插入元素，多个消费者客户端使用brpop命令阻塞式的抢列表尾部的元素。")]),e._v(" "),a("p",[a("img",{attrs:{src:s(758),alt:""}})]),e._v(" "),a("p",[e._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t图3.1 Redis消息队列模型")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("lpush+lpop=stack（栈）\nlpush+rpop=Queue（队列）\nlpush+brpop=Message Queue（消息队列）\n")])])])])]),e._v(" "),a("h4",{attrs:{id:"_4、散列-hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、散列-hash"}},[e._v("#")]),e._v(" 4、散列（Hash）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("在Redis中，哈希类型是指键值本身又是一个键值对结构\n")])])]),a("p",[a("img",{attrs:{src:s(759),alt:""}})]),e._v(" "),a("p",[e._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t图4.1 哈希结构")]),e._v(" "),a("h5",{attrs:{id:"_4-1-基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-基本命令"}},[e._v("#")]),e._v(" 4.1 基本命令")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("hset key field value")]),e._v(" 设置值，设置成功返回1，否则返回0")]),e._v(" "),a("li",[a("code",[e._v("hget key field")]),e._v(" 获取值，如果键或field不存在，会返回nil")]),e._v(" "),a("li",[a("code",[e._v("hdel key field [field ...]")]),e._v(" 删除一个或多个field，返回结果为成功删除field的个数")]),e._v(" "),a("li",[a("code",[e._v("hlen key")]),e._v("  计算field个数,，返回结果是field的个数")]),e._v(" "),a("li",[a("code",[e._v("hmset key field value [field value ...]")]),e._v("  批量设置值")]),e._v(" "),a("li",[a("code",[e._v("hmget key field [field ...] 批量获取值")])]),e._v(" "),a("li",[a("code",[e._v("hexists key field")]),e._v(" 判断field是否存在")]),e._v(" "),a("li",[a("code",[e._v("hkeys key")]),e._v("  获取所有field")]),e._v(" "),a("li",[a("code",[e._v("hvals key")]),e._v("  获取所有value")]),e._v(" "),a("li",[a("code",[e._v("hgetall key")]),e._v("  获取所有的field-value")]),e._v(" "),a("li",[a("code",[e._v("hincrby key field increment")]),e._v("  对field的值自增指定数值")]),e._v(" "),a("li",[a("code",[e._v("hincrbyfloat key field incrementfloat")]),e._v("  对field的值自增指定数值（可以是浮点数 ）")])]),e._v(" "),a("h5",{attrs:{id:"_4-2-内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-内部编码"}},[e._v("#")]),e._v(" 4.2 内部编码")]),e._v(" "),a("p",[e._v("​\tziplist（压缩列表）：当哈希类型元素个数小于hash-max-ziplist-entries配置（默认512个）、同时所有值都小于hash-max-ziplist-value配置（默认64字节）时，redis会使用ziplist作为哈希的内部实现，ziplist使用更加紧凑的结构实现多个元素的连续存储，所以在节省内存方面比hashtable更优秀。")]),e._v(" "),a("p",[e._v("​\thashtable（哈希表）：当哈希类型无法那边只有ziplist的条件时，redis使用hashtable作为哈希的内部实现。")]),e._v(" "),a("h4",{attrs:{id:"_5、集合-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、集合-set"}},[e._v("#")]),e._v(" 5、集合（Set）")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("集合类型也是用来保存多个的字符串元素，但和列表类型不一样的是，集合中不允许有重复元素，并且集合中的元素是无序的，不能通过索引下标获取元素。\n")])])]),a("h5",{attrs:{id:"_5-1-基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-基本命令"}},[e._v("#")]),e._v(" 5.1 基本命令")]),e._v(" "),a("h6",{attrs:{id:"_5-1-1-集合内操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-集合内操作"}},[e._v("#")]),e._v(" 5.1.1 集合内操作")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("sadd key element [element ...]")]),e._v("  添加元素，返回结果为添加成功的元素个数")]),e._v(" "),a("li",[a("code",[e._v("srem key element [element ...]")]),e._v("  删除元素，返回结果为删除成功的元素个数")]),e._v(" "),a("li",[a("code",[e._v("scard key")]),e._v("  计算元素个数")]),e._v(" "),a("li",[a("code",[e._v("sismember key element")]),e._v("  判断元素是否在集合中，在集合内返回1，否则返回0")]),e._v(" "),a("li",[a("code",[e._v("srandmember key [count]")]),e._v("  随机从集合中返回指定个数元素，count是参数，如果不写默认为1")]),e._v(" "),a("li",[a("code",[e._v("spop key")]),e._v("  从集合中随机弹出一个元素")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("srandmember 和 spop的不同：\n\tspop命令执行后，元素会从集合中删除，而srandmember不会\n")])])]),a("ul",[a("li",[a("code",[e._v("smembers key")]),e._v("   获取所有元素，返回结果是无序的")])]),e._v(" "),a("h6",{attrs:{id:"_5-1-2-集合间操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-集合间操作"}},[e._v("#")]),e._v(" 5.1.2 集合间操作")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("求交集")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("取两个集合相同的部分。若只有一个集合，则返回集合本身\n")])])]),a("ul",[a("li",[e._v("sinter key [key ...]")])])]),e._v(" "),a("li",[a("p",[e._v("求并集")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("合并两个集合的所有元素，相同的进行去重。若只有一个集合，则返回集合本身\n")])])]),a("ul",[a("li",[e._v("sunion key [key ...]")])])]),e._v(" "),a("li",[a("p",[e._v("求差集")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("返回在第一个集合中存在，且不在第二个集合中存在的元素。若只有一个集合，则返回集合本身\n")])])]),a("ul",[a("li",[e._v("sdiff key [key ...]")])])]),e._v(" "),a("li",[a("p",[e._v("将交集、并集、差集的结果保存")]),e._v(" "),a("ul",[a("li",[e._v("sinterstore destination key [key ...]")]),e._v(" "),a("li",[e._v("sunionstore destination key [key ...]")]),e._v(" "),a("li",[e._v("sdiffstore destination key [key ...]")])])])]),e._v(" "),a("h5",{attrs:{id:"_5-2-内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-内部编码"}},[e._v("#")]),e._v(" 5.2 内部编码")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("intset（整数集合）")]),e._v(" "),a("p",[e._v("当集合中的元素都是整数且元素个数小于set-max-intset-entries配置（默认512个），redis会选用intset来作为集合的内部实现，从而减少内存的使用")])]),e._v(" "),a("li",[a("p",[e._v("hashtable（哈希表）")]),e._v(" "),a("p",[e._v("当集合类型无法满足intset的条件时，redis会选用hashtable作为集合的内部实")])])]),e._v(" "),a("h4",{attrs:{id:"_6、有序集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、有序集合"}},[e._v("#")]),e._v(" 6、有序集合")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("有序集合保留了集合不能有重复成员的特性，但不同的是，有序集合中的元素可以排序。但是它和列表使用索引下标作为排序依据不同的是，它给每个元素设置一个分数作为排序的依据。\n")])])]),a("h5",{attrs:{id:"_6-1-基本命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-基本命令"}},[e._v("#")]),e._v(" 6.1 基本命令")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("zadd key score member [score member ...]")]),e._v("    添加成员")]),e._v(" "),a("li",[a("code",[e._v("zcard key")]),e._v("  计算成员个数")]),e._v(" "),a("li",[a("code",[e._v("zscore key member")]),e._v("   计算某个成员的分数")]),e._v(" "),a("li",[a("code",[e._v("zrank key member")]),e._v("   计算成员的排名，从分数从低到高返回排名，排名从0开始计算")]),e._v(" "),a("li",[a("code",[e._v("zrevrank key member")]),e._v("   计算成员的排名，从分数从高到低返回排名，排名从0开始计算")]),e._v(" "),a("li",[a("code",[e._v("zrem key member[member...] 删除成员")])]),e._v(" "),a("li",[a("code",[e._v("zincrby key increment member")]),e._v("  增加成员的分数")]),e._v(" "),a("li",[a("code",[e._v("zrange key start end [withscores]")]),e._v("  返回指定排名范围的成员，如果加上withscores选项，会同时返回成员的分数")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("zrange 是从低到高返回（升序），zrevrange 是从高到低返回（降序）\n")])])]),a("ul",[a("li",[a("code",[e._v("zrangebyscore key min max [withscores]")]),e._v("  返回指定分数范围的成员，如果加上withscores选项，会同时返回成员的分数")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1、zrangebyscore 是从低到高返回（升序），zrevrangebyscore 是从高到低返回（降序）\n2、min和max还支持开区间（小括号）和闭区间（中括号）\n3、-inf和+inf分别代表负无穷和正无穷\n")])])]),a("ul",[a("li",[a("code",[e._v("zcount key min max")]),e._v("   返回指定分数范围成员个数")]),e._v(" "),a("li",[a("code",[e._v("zremrangebyrank key start end")]),e._v("  删除指定排名内的升序元素")]),e._v(" "),a("li",[a("code",[e._v("zremrangebyscore key min max")]),e._v("  删除指定分数范围的成员")])]),e._v(" "),a("h5",{attrs:{id:"_6-2-内部编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-内部编码"}},[e._v("#")]),e._v(" 6.2 内部编码")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("ziplist（压缩列表）")]),e._v(" "),a("p",[e._v("当有序集合的元素个数小于zset-max-ziplist-entries配置（默认128个），同时每个元素的值都小于zset-max-ziplist-value配置（默认64字节），使用ziplist来作为有序集合的内部实现")])]),e._v(" "),a("li",[a("p",[e._v("skiplist（跳跃表）")]),e._v(" "),a("p",[e._v("ziplist条件不满足时，有序集合使用skiplist作为内部实现")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);