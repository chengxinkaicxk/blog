(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{648:function(t,r,s){t.exports=s.p+"assets/img/binary-tree.765cbf64.png"},799:function(t,r,s){"use strict";s.r(r);var a=s(4),e=Object(a.a)({},(function(){var t=this,r=t.$createElement,a=t._self._c||r;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"b-树与b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-树与b-树"}},[t._v("#")]),t._v(" B-树与B+树")]),t._v(" "),a("h3",{attrs:{id:"二叉树-bst-binary-search-sort-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-bst-binary-search-sort-tree"}},[t._v("#")]),t._v(" 二叉树(BST binary search/sort tree)")]),t._v(" "),a("blockquote",[a("p",[t._v("二叉查找树就是一颗二叉树，它的左节点比父节点小，右节点比父节点大。它的高度决定了查找效率")])]),t._v(" "),a("p",[t._v("理想状态下，二叉树的增删改查的时间复杂度为O(LogN)，最坏的情况为O(N)。"),a("br"),t._v("\n当他的高度为LogN+1时，我们说二叉查找树是平衡的。")]),t._v(" "),a("p",[a("img",{attrs:{src:s(648),alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("BST存在的问题")]),a("br")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("树的高度直接决定了树的查找效率。\n理想的高度是 h = logN，最坏的情况是所有的节点都在一条斜线上，这样树的高度就为N\n")])])]),a("h3",{attrs:{id:"红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")])])}),[],!1,null,null,null);r.default=e.exports}}]);