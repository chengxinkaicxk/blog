(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{648:function(e,t,r){e.exports=r.p+"assets/img/binary-tree.765cbf64.png"},792:function(e,t,r){"use strict";r.r(t);var a=r(4),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"二叉树与红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树与红黑树"}},[e._v("#")]),e._v(" 二叉树与红黑树")]),e._v(" "),a("h3",{attrs:{id:"二叉树-bst-binary-search-sort-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-bst-binary-search-sort-tree"}},[e._v("#")]),e._v(" 二叉树(BST binary search/sort tree)")]),e._v(" "),a("blockquote",[a("p",[e._v("二叉查找树就是一颗二叉树，它的左节点比父节点小，右节点比父节点大。它的高度决定了查找效率")])]),e._v(" "),a("p",[e._v("理想状态下，二叉树的增删改查的时间复杂度为O(LogN)，最坏的情况为O(N)。"),a("br"),e._v("\n当他的高度为LogN+1时，我们说二叉查找树是平衡的。")]),e._v(" "),a("p",[a("img",{attrs:{src:r(648),alt:""}})]),e._v(" "),a("p",[a("strong",[e._v("BST存在的问题")]),a("br")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("树的高度直接决定了树的查找效率。\n理想的高度是 h = logN，最坏的情况是所有的节点都在一条斜线上，这样树的高度就为N\n")])])]),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.cs.usfca.edu/~galles/visualization/BST.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("演示地址"),a("OutboundLink")],1)])]),e._v(" "),a("h3",{attrs:{id:"红黑树-rbtree-red-black-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树-rbtree-red-black-tree"}},[e._v("#")]),e._v(" 红黑树(RBTree Red-Black Tree)")]),e._v(" "),a("blockquote",[a("p",[e._v("红黑树又称平衡查找二叉树。平衡树的插入和删除的时候，会通过旋转操作将高度保持在LogN。")])]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/e136ec79235c",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考链接"),a("OutboundLink")],1)])]),e._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.cs.usfca.edu/~galles/visualization/RedBlack.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("演示地址"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);